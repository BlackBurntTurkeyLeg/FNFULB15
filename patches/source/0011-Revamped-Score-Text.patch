From a7d9d9d8f90681f5f40348c30a96fea5fdb67fad Mon Sep 17 00:00:00 2001
From: l1ttleO <l1ttleofficial@outlook.com>
Date: Fri, 1 Jul 2022 21:37:56 +0500
Subject: [PATCH] Add visual options 'Advanced Score Text' and 'Score Text Underlay Opacity'

---
 source/ClientPrefs.hx               |  10 ++
 source/PlayState.hx                 | 163 ++++++++++++++++++++++------
 source/options/VisualsUISubState.hx |  19 ++++
 3 files changed, 158 insertions(+), 34 deletions(-)

diff --git a/source/ClientPrefs.hx b/source/ClientPrefs.hx
index 3368b24..10df0e3 100644
--- a/source/ClientPrefs.hx
+++ b/source/ClientPrefs.hx
@@ -70,6 +70,8 @@ class ClientPrefs {
 	public static var scoreSystem:String = 'Vanilla';
 	public static var accuracySystem:String = 'Psych';
 	public static var missAnimsSounds:Bool = true;
+	public static var advancedScoreTxt:Bool = true;
+	public static var scoreTxtUnderlayOpacity:Float = 0.3;
 
 	//Every key has two binds, add your key bind down here and then add your control on options/ControlsSubState.hx and Controls.hx
 	public static var keyBinds:Map<String, Array<FlxKey>> = [
@@ -149,6 +151,8 @@ class ClientPrefs {
 		FlxG.save.data.scoreSystem = scoreSystem;
 		FlxG.save.data.accuracySystem = accuracySystem;
 		FlxG.save.data.missAnimsSounds = missAnimsSounds;
+		FlxG.save.data.advancedScoreTxt = advancedScoreTxt;
+		FlxG.save.data.scoreTxtUnderlayOpacity = scoreTxtUnderlayOpacity;
 	
 		FlxG.save.flush();
 
@@ -293,6 +297,12 @@ class ClientPrefs {
 		if(FlxG.save.data.missAnimsSounds != null) {
 			missAnimsSounds = FlxG.save.data.missAnimsSounds;
 		}
+		if(FlxG.save.data.advancedScoreTxt != null) {
+			advancedScoreTxt = FlxG.save.data.advancedScoreTxt;
+		}
+		if(FlxG.save.data.scoreTxtUnderlayOpacity != null) {
+			scoreTxtUnderlayOpacity = FlxG.save.data.scoreTxtUnderlayOpacity;
+		}
 		
 		// flixel automatically saves your volume!
 		if(FlxG.save.data.volume != null)
diff --git a/source/PlayState.hx b/source/PlayState.hx
index c29c99b..4b22913 100644
--- a/source/PlayState.hx
+++ b/source/PlayState.hx
@@ -75,17 +75,33 @@ class PlayState extends MusicBeatState
 	public static var STRUM_X_MIDDLESCROLL = -278;
 
 	public static var ratingStuff:Array<Dynamic> = [
-		['You Suck!', 0.2], //From 0% to 19%
-		['Shit', 0.4], //From 20% to 39%
-		['Bad', 0.5], //From 40% to 49%
-		['Bruh', 0.6], //From 50% to 59%
-		['Meh', 0.69], //From 60% to 68%
-		['Nice', 0.7], //69%
-		['Good', 0.8], //From 70% to 79%
-		['Great', 0.9], //From 80% to 89%
-		['Sick!', 1], //From 90% to 99%
-		['Perfect!!', 1] //The value on this one isn't used actually, since Perfect is always "1"
+		['=F=', 0.4], //From 0% to 39%
+		['!E!', 0.5], //From 40% to 49%
+		['@D@', 0.6], //From 50% to 59%
+		['#C#', 0.7], //From 60% to 68%
+		['$B$', 0.8], //From 70% to 79%
+		['^A^', 0.9], //From 80% to 89%
+		['&S&', 0.99], //From 90% to 99%
+		['_SS_', 1]
 	];
+	public static var healthStuff:Array<Dynamic> = [
+		['=', 0],
+		['!', 0.4],
+		['@', 0.8],
+		['#', 1.2],
+		['$', 1.6],
+		['^', 2],
+		['&', 2]
+	];
+	var redFormat:FlxTextFormat = new FlxTextFormat(FlxColor.RED);
+	var orangeFormat:FlxTextFormat = new FlxTextFormat(FlxColor.ORANGE);
+	var yellowFormat:FlxTextFormat = new FlxTextFormat(FlxColor.YELLOW);
+	var greenFormat:FlxTextFormat = new FlxTextFormat(FlxColor.GREEN);
+	var limeFormat:FlxTextFormat = new FlxTextFormat(FlxColor.LIME);
+	var cyanFormat:FlxTextFormat = new FlxTextFormat(FlxColor.CYAN);
+	var magentaFormat:FlxTextFormat = new FlxTextFormat(FlxColor.MAGENTA);
+	var blackFormat:FlxTextFormat = new FlxTextFormat(FlxColor.BLACK);
+
 	public var modchartTweens:Map<String, FlxTween> = new Map<String, FlxTween>();
 	public var modchartSprites:Map<String, ModchartSprite> = new Map<String, ModchartSprite>();
 	public var modchartTimers:Map<String, FlxTimer> = new Map<String, FlxTimer>();
@@ -117,6 +133,7 @@ class PlayState extends MusicBeatState
 	public var songSpeedTween:FlxTween;
 	public var songSpeed(default, set):Float = 1;
 	public var songSpeedType:String = "multiplicative";
+	public var songSpeedBonus:Float = 1 / 2.4;
 	public var noteKillOffset:Float = 350;
 
 	public var boyfriendGroup:FlxSpriteGroup;
@@ -164,7 +181,11 @@ class PlayState extends MusicBeatState
 	public var gfSpeed:Int = 1;
 	public var health:Float = 1;
 	public var healthDrained:Float = 1;
+	public var healthPercentageDisplay:Float = 50;
+	public var healthPercentageBar:Float = 50;
+	public var oldPercentage:Float = 50;
 	public var combo:Int = 0;
+	public var maxCombo:Int = 0;
 
 	private var healthBarBG:AttachedSprite;
 	public var healthBar:FlxBar;
@@ -253,9 +274,12 @@ class PlayState extends MusicBeatState
 
 	public var songScore:Float = 0;
 	public var maxScore:Float = 0;
+	public var thScore:Float = 0;
 	public var songHits:Int = 0;
 	public var songMisses:Int = 0;
+	public var pressMisses:Int = 0;
 	public var scoreTxt:FlxText;
+	public var scoreTxtBG:FlxSprite;
 	var timeTxt:FlxText;
 	var scoreTxtTween:FlxTween;
 
@@ -1191,10 +1215,15 @@ class PlayState extends MusicBeatState
 		reloadHealthBarColors();
 
 		scoreTxt = new FlxText(0, healthBarBG.y + 36, FlxG.width, "", 20);
-		scoreTxt.setFormat(Paths.font("vcr.ttf"), 20, FlxColor.WHITE, CENTER, FlxTextBorderStyle.OUTLINE, FlxColor.BLACK);
+		scoreTxt.setFormat(Paths.font("vcr.ttf"), ClientPrefs.advancedScoreTxt ? 18 : 20, FlxColor.WHITE, CENTER, FlxTextBorderStyle.OUTLINE, FlxColor.BLACK);
 		scoreTxt.scrollFactor.set();
-		scoreTxt.borderSize = 1.25;
+		scoreTxt.borderSize = 1.15;
 		scoreTxt.visible = !ClientPrefs.hideHud;
+
+		scoreTxtBG = new FlxSprite(0, scoreTxt.y - 5).makeGraphic(FlxG.width, 30, FlxColor.BLACK);
+		scoreTxtBG.alpha = ClientPrefs.scoreTxtUnderlayOpacity;
+		scoreTxtBG.scrollFactor.set();
+		add(scoreTxtBG);
 		add(scoreTxt);
 
 		botplayTxt = new FlxText(400, timeBarBG.y + 55, FlxG.width - 800, "BOTPLAY", 32);
@@ -1220,6 +1249,7 @@ class PlayState extends MusicBeatState
 		iconP1.cameras = [camHUD];
 		iconP2.cameras = [camHUD];
 		scoreTxt.cameras = [camHUD];
+		scoreTxtBG.cameras = [camHUD];
 		botplayTxt.cameras = [camHUD];
 		timeBar.cameras = [camHUD];
 		timeBarBG.cameras = [camHUD];
@@ -1398,6 +1428,7 @@ class PlayState extends MusicBeatState
 			for (note in notes) note.resizeByRatio(ratio);
 			for (note in unspawnNotes) note.resizeByRatio(ratio);
 		}
+		songSpeedBonus = (songSpeed + value) / 2;
 		songSpeed = value;
 		noteKillOffset = 350 / songSpeed;
 		return value;
@@ -2197,10 +2228,50 @@ class PlayState extends MusicBeatState
 
 	public function updateScore(miss:Bool = false)
 	{
-		scoreTxt.text = 'Score: ' + songScore
-		+ ' | Misses: ' + songMisses
-		+ ' | Rating: ' + ratingName
-		+ (ratingName != '?' ? ' (${Highscore.floorDecimal(ratingPercent * 100, 2)}%) - $ratingFC' : '');
+		oldPercentage = Highscore.floorDecimal(health / 0.02, 0);
+		var nearestTen:Float = FlxMath.roundDecimal(ratingPercent * 10, 0) * 10; // multiply AFTER rounding
+		var accuracyPercentage:Float = Highscore.floorDecimal(ratingPercent * 100, 2);
+		var suffix:String = '';
+		if (accuracyPercentage > 30 && nearestTen - accuracyPercentage > 0) {
+			if (nearestTen - accuracyPercentage < 5) suffix = '+';
+			if (accuracyPercentage > 99) suffix = '-';
+			else if (nearestTen - accuracyPercentage < 1) suffix = "++";
+		}
+
+		var thScoreHealthTxt:String = '';
+		var pressMissesTxt:String = '';
+		var accuracyTxt:String = '';
+		var perfRatingTxt:String = '';
+		var unrankedTxt:String = cpuControlled || practiceMode || chartingMode ? ' ![UNRANKED]!' : '';
+		if (ClientPrefs.advancedScoreTxt) {
+			var healthStyle:String = '';
+			if(health >= 2) {
+				healthStyle = healthStuff[healthStuff.length-1][0]; //Uses last string
+			} else {
+				for (i in 0...healthStuff.length-1) {
+					if(health < healthStuff[i][1]) {
+						healthStyle = healthStuff[i][0];
+						break;
+					}
+				}
+			}
+			thScoreHealthTxt = ' (${FlxMath.roundDecimal(thScore, 0)}) // Health: $healthStyle$oldPercentage%$healthStyle';
+			if (pressMisses > 0)
+				pressMissesTxt = ' (+$pressMisses)';
+			accuracyTxt = ' // Accuracy: $accuracyPercentage%$ratingFC';
+			perfRatingTxt = ' (${Highscore.floorDecimal(perfRating, 2)})';
+		}
+		scoreTxt.applyMarkup('Score$unrankedTxt: ${FlxMath.roundDecimal(songScore, 0)}$thScoreHealthTxt // Misses: $songMisses$pressMissesTxt$accuracyTxt // Rating: $ratingName$suffix$perfRatingTxt',
+			[
+				new FlxTextFormatMarkerPair(redFormat, '!'),
+				new FlxTextFormatMarkerPair(orangeFormat, '@'),
+				new FlxTextFormatMarkerPair(yellowFormat, '#'),
+				new FlxTextFormatMarkerPair(greenFormat, '$'),
+				new FlxTextFormatMarkerPair(limeFormat, '^'),
+				new FlxTextFormatMarkerPair(cyanFormat, '&'),
+				new FlxTextFormatMarkerPair(magentaFormat, '_'),
+				new FlxTextFormatMarkerPair(blackFormat, '=')
+			]);
 
 		if(ClientPrefs.scoreZoom && !miss && !cpuControlled)
 		{
@@ -2311,6 +2382,7 @@ class PlayState extends MusicBeatState
 			case "constant":
 				songSpeed = ClientPrefs.getGameplaySetting('scrollspeed', 1);
 		}
+		songSpeedBonus = songSpeed / 2.4;
 
 		var songData = SONG;
 		Conductor.changeBPM(songData.bpm);
@@ -2940,6 +3012,12 @@ class PlayState extends MusicBeatState
 		// FlxG.watch.addQuick('VOL', vocals.amplitudeLeft);
 		// FlxG.watch.addQuick('VOLRight', vocals.amplitudeRight);
 
+		if (health > 2) health = 2;
+		healthPercentageDisplay = health / 0.02; // Don't round this for smooth health bar movement
+		healthPercentageBar = opponentPlay ? Math.max(0, Math.min(100, 100 - healthPercentageDisplay)) : healthPercentageDisplay;
+		if (ClientPrefs.advancedScoreTxt && oldPercentage != Highscore.floorDecimal(healthPercentageDisplay, 0))
+			updateScore(true);
+
 		var mult:Float = FlxMath.lerp(1, iconP1.scale.x, CoolUtil.boundTo(1 - (elapsed * 9), 0, 1));
 		iconP1.scale.set(mult, mult);
 		iconP1.updateHitbox();
@@ -2953,15 +3031,15 @@ class PlayState extends MusicBeatState
 		iconP1.x = healthBar.x + (healthBar.width * (FlxMath.remapToRange(healthBar.percent, 0, 100, 100, 0) * 0.01)) + (150 * iconP1.scale.x - 150) / 2 - iconOffset;
 		iconP2.x = healthBar.x + (healthBar.width * (FlxMath.remapToRange(healthBar.percent, 0, 100, 100, 0) * 0.01)) - (150 * iconP2.scale.x) / 2 - iconOffset * 2;
 
-		if (health > 2)
-			health = 2;
+		/*if (health > 2)
+			health = 2;*/
 
-		if (healthBar.percent < 20)
+		if (healthPercentageBar < 20)
 			iconP1.animation.curAnim.curFrame = 1;
 		else
 			iconP1.animation.curAnim.curFrame = 0;
 
-		if (healthBar.percent > 80)
+		if (healthPercentageBar > 80)
 			iconP2.animation.curAnim.curFrame = 1;
 		else
 			iconP2.animation.curAnim.curFrame = 0;
@@ -3662,6 +3740,7 @@ class PlayState extends MusicBeatState
 
 				var newValue:Float = SONG.speed * ClientPrefs.getGameplaySetting('scrollspeed', 1) * val1;
 
+				songSpeedBonus = (songSpeed + newValue) / 2;
 				if(val2 <= 0)
 				{
 					songSpeed = newValue;
@@ -4009,13 +4088,15 @@ class PlayState extends MusicBeatState
 		note.ratingMod = daRating.ratingMod;
 		if(!note.ratingDisabled) daRating.increase();
 		note.rating = daRating.name;
+		score = daRating.score; // YOU BROKE IT AGAIN (PR #9424)
+		if (ClientPrefs.scoreSystem == 'Vanilla') thScore += ratingsData[0].score;
 
 		if(daRating.noteSplash && !note.noteSplashDisabled)
 		{
 			spawnNoteSplashOnNote(note);
 		}
 
-		if(!practiceMode && !cpuControlled) {
+		if(/*!practiceMode && */!cpuControlled) {
 			if (ClientPrefs.scoreSystem == 'osu!mania') {
 				bonus += daRating.hitBonus - daRating.hitPunishment;
 				if (bonus < 0) bonus = 0;
@@ -4027,6 +4108,7 @@ class PlayState extends MusicBeatState
 				var bonusScore:Float = firstMultiplier * (daRating.hitBonusValue * bonusSqrtArray[bonus] / 320);
 
 				score = baseScore + bonusScore;
+				thScore += firstMultiplier * 2;
 			}
 			songScore += score;
 			if(!note.ratingDisabled)
@@ -4391,6 +4473,8 @@ class PlayState extends MusicBeatState
 		songMisses++;
 		vocals.volume = 0;
 		if(!practiceMode && ClientPrefs.scoreSystem == 'Vanilla') songScore -= 10;
+		if (ClientPrefs.scoreSystem == 'Vanilla') thScore += ratingsData[0].score;
+		else thScore += maxScore * (practiceMode ? 0.5 : 1) * 0.5 / mustHitNoteCount;
 		bonus = 0;
 
 		totalPlayed++;
@@ -4433,8 +4517,8 @@ class PlayState extends MusicBeatState
 				if (!ClientPrefs.ghostTapping) FlxG.sound.play(Paths.soundRandom('missnote', 1, 3), FlxG.random.float(0.1, 0.2));
 			}
 			if (ClientPrefs.ghostTapping) {
-				
-
+				pressMisses++;
+				updateScore(true);
 				return;
 			}
 			health -= 0.05 * healthLoss;
@@ -4451,6 +4535,8 @@ class PlayState extends MusicBeatState
 			combo = 0;
 
 			if(!practiceMode && ClientPrefs.scoreSystem == 'Vanilla') songScore -= 10;
+			if (ClientPrefs.scoreSystem == 'Vanilla') thScore += ratingsData[0].score;
+			else thScore += maxScore * (practiceMode ? 0.5 : 1) * 0.5 / mustHitNoteCount;
 			bonus = 0;
 			if(!endingSong) {
 				songMisses++;
@@ -5078,21 +5164,22 @@ class PlayState extends MusicBeatState
 	public var ratingName:String = '?';
 	public var ratingPercent:Float;
 	public var ratingFC:String;
+	public var perfRating:Float;
 	public function RecalculateRating(badHit:Bool = false) {
 		setOnLuas('score', songScore);
 		setOnLuas('misses', songMisses);
 		setOnLuas('hits', songHits);
 		
-		if (badHit)
+		/*if (badHit)
 			updateScore(true); // miss notes shouldn't make the scoretxt bounce -Ghost
 		else
-			updateScore(false);
+			updateScore(false); Ghost, you kinda messed up -l1ttleO*/
 
 		var ret:Dynamic = callOnLuas('onRecalculateRating', [], false);
 		if(ret != FunkinLua.Function_Stop)
 		{
 			if(totalPlayed < 1) //Prevent divide by 0
-				ratingName = '?';
+				ratingPercent = 1;
 			else
 			{
 				if (!ClientPrefs.accuracySystem.startsWith('osu!mania')) {
@@ -5106,7 +5193,7 @@ class PlayState extends MusicBeatState
 					ratingPercent = (maxesAndSicks + 200 * goods + 100 * bads + 50 * shits) / ((isStrictAcc ? 305 : 300) * totalPlayed);
 				}
 				// Rating Name
-				if(ratingPercent >= 1)
+			}	if(ratingPercent >= 0.99)
 				{
 					ratingName = ratingStuff[ratingStuff.length-1][0]; //Uses last string
 				}
@@ -5121,16 +5208,24 @@ class PlayState extends MusicBeatState
 						}
 					}
 				}
-			}
+			//}
 
+			var ratingMultiplier:Float = 1.5;
 			// Rating FC
 			ratingFC = "";
-			if (sicks > 0) ratingFC = "SFC";
-			if (goods > 0) ratingFC = "GFC";
-			if (bads > 0 || shits > 0) ratingFC = "FC";
-			if (songMisses > 0 && songMisses < 10) ratingFC = "SDCB";
-			else if (songMisses >= 10) ratingFC = "Clear";
-		}
+			if (maxs > 0) ratingFC = " (!MFC!)";
+			if (sicks > 0) ratingFC = " (_SFC_)";
+			if (goods > 0) { ratingFC = " (^GFC^)"; ratingMultiplier *= ((maxs + sicks) / totalPlayed); }
+			if (bads > 0 || shits > 0) { ratingFC = " ($FC$)"; ratingMultiplier *= (maxs + sicks + goods + bads * 0.5) / totalPlayed; }
+			if (songMisses > 0) { ratingFC = " (&SDCB&)"; ratingMultiplier -= Math.min(0.5, songMisses / 50); }
+			if (songMisses >= 10) ratingFC = " (#Clear#)";
+
+			if (combo > maxCombo) maxCombo = combo;
+			var seconds:Float = Conductor.songPosition / 1000;
+			var noteDensity:Float = totalNotesHit / (seconds - seconds / 10) * songSpeedBonus;
+			perfRating = ratingPercent * ratingMultiplier * (noteDensity + ((combo + maxCombo) / 2) / 100) * songSpeedBonus;
+		}
+		updateScore(badHit); // i aint waiting for #9419 to get merged
 		setOnLuas('rating', ratingPercent);
 		setOnLuas('ratingName', ratingName);
 		setOnLuas('ratingFC', ratingFC);
diff --git a/source/options/VisualsUISubState.hx b/source/options/VisualsUISubState.hx
index 476abf1..0d38df2 100644
--- a/source/options/VisualsUISubState.hx
+++ b/source/options/VisualsUISubState.hx
@@ -113,6 +113,25 @@ class VisualsUISubState extends BaseOptionsMenu
 		option.onChange = onChangeMissShakeIntensity;
 		addOption(option);
 		
+		var option:Option = new Option('Advanced Score Text', //Name
+			'If checked, there will be additional information displayed in score text.', //Description
+			'advancedScoreTxt', //Save data variable name
+			'bool', //Variable type
+			true); //Default value
+		addOption(option);
+		
+		var option:Option = new Option('Score Text Underlay Opacity',
+			'How opaque should be an underlay for score text.',
+			'scoreTxtUnderlayOpacity',
+			'percent',
+			0.3);
+		addOption(option);
+		option.scrollSpeed = 1.6;
+		option.minValue = 0.0;
+		option.maxValue = 1;
+		option.changeValue = 0.1;
+		option.decimals = 1;
+
 		#if !mobile
 		var option:Option = new Option('FPS Counter',
 			'If unchecked, hides FPS Counter.',
-- 
2.34.1.windows.1

